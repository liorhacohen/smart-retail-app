# Smart Retail Inventory System

## Business Use Case

Develop an inventory management system for a retail store chain. The application will track stock levels in real-time, notify store managers when items run low, and allow them to place restocking orders.

## Features

- REST API in Flask to manage stock CRUD operations and restocking
- Fetch stock analytics and trends
- Optional React frontend for store managers to visualize stock levels and manage inventory
- Use PostgreSQL for data persistence

## Tech Implementation

### Application Development

- **Flask app**: API endpoints for stock operations
- **React (optional)**: Dashboard with graphs (e.g., using Chart.js)
- **PostgreSQL database**: Tables for products, stock levels, and restocking logs

### Containerization

- Write separate Dockerfiles for the Flask backend and React frontend
- Use docker-compose for local development to link Flask, React, and PostgreSQL [optional]

### Kubernetes Deployment

- Create ConfigMaps for application-specific configurations (e.g., environment type)
- Use Secrets for PostgreSQL credentials
- Define Deployments for Flask, React, and PostgreSQL
- Create Services for backend/frontend communication
- Set up Ingress for external access to the app

### Monitoring

- Add Prometheus to monitor API response times and container resource usage
- Use Grafana to create dashboards showing stock trends and API latency

### Git Repositories

- **App repo**: Flask app, React frontend, Dockerfiles
- **DevOps repo**: Kubernetes manifests, Jenkinsfile, and monitoring setup

## CI/CD Pipeline

### Stages:

1. Lint Flask and React code
2. Run unit tests for backend logic
3. Build and push Docker images to Docker Hub
4. Deploy to Minikube or EKS using Kubernetes manifests
5. Run Prometheus and Grafana as part of the deployment
6. Perform API testing on the live deployment

### Requirements:

- Split Git repositories as per structure
- Ensure CI/CD pipelines deploy applications automatically with health checks
- Monitoring is optional but highly recommended

## API Endpoints

### Inventory Management

- **GET** `/api/products`: Get a list of all products with stock levels
- **GET** `/api/products/<product_id>`: Get details of a specific product
- **POST** `/api/products`: Add a new product (requires JSON payload with name, SKU, stock level, etc.)
- **PUT** `/api/products/<product_id>`: Update product details or stock level
- **DELETE** `/api/products/<product_id>`: Delete a product from the inventory

### Restocking Operations

- **POST** `/api/products/<product_id>/restock`: Restock a specific product (requires quantity in JSON payload)
- **GET** `/api/restocks`: Get a history of restocking logs

### Analytics

- **GET** `/api/products/low-stock`: Get a list of products with stock below a defined threshold
- **GET** `/api/products/analytics`: Fetch stock trend data for dashboard visualization